apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      kubectl.kubernetes.io/restartedAt: "2025-09-01T21:56:37-04:00"
    creationTimestamp: "2025-09-02T01:56:37Z"
    generateName: foodshare-backend-597db89bdd-
    labels:
      app: foodshare-backend
      pod-template-hash: 597db89bdd
    name: foodshare-backend-597db89bdd-mf976
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: foodshare-backend-597db89bdd
      uid: 25e1d663-c84d-4b98-b530-e60a6708ed5b
    resourceVersion: "12002"
    uid: c7ea49d3-e2c1-48b0-94d9-5770f78678eb
  spec:
    containers:
    - args:
      - |
        apk add --no-cache postgresql-client &&
        npm install express pg cors &&
        echo 'const express = require("express");
        const { Client } = require("pg");
        const cors = require("cors");

        const app = express();
        app.use(cors());
        app.use(express.json());

        const client = new Client({
          host: "postgres",
          port: 5432,
          database: "foodshare",
          user: "foodadmin",
          password: "FoodShare2025!"
        });

        client.connect();

        app.get("/api/health", (req, res) => {
          res.json({ status: "healthy", service: "FoodShare Backend" });
        });

        app.get("/api/food", async (req, res) => {
          try {
            const result = await client.query("SELECT * FROM food_listings ORDER BY created_at DESC");
            res.json(result.rows);
          } catch (err) {
            res.status(500).json({ error: err.message });
          }
        });

        app.post("/api/food", async (req, res) => {
          try {
            const { restaurant, food_type, quantity, expiry_date, location, allergies } = req.body;
            const result = await client.query(
              "INSERT INTO food_listings (restaurant, food_type, quantity, expiry_date, location, allergies) VALUES ($1, $2, $3, $4, $5, $6) RETURNING *",
              [restaurant, food_type, quantity, expiry_date, location, allergies]
            );
            res.json(result.rows[0]);
          } catch (err) {
            res.status(500).json({ error: err.message });
          }
        });

        app.listen(3000, () => {
          console.log("FoodShare Backend running on port 3000");
        });' > server.js &&
        node server.js
      command:
      - sh
      - -c
      image: node:16-alpine
      imagePullPolicy: IfNotPresent
      name: backend
      ports:
      - containerPort: 3000
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mfxgh
        readOnly: true
      workingDir: /app
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: tc-enterprise-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: kube-api-access-mfxgh
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:56:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:56:37Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:56:38Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:56:38Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:56:37Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://9f3131bd0107d076986752de60a646ae6599462fa72748208cf95c4a59a0a87d
      image: docker.io/library/node:16-alpine
      imageID: docker.io/library/node@sha256:a1f9d027912b58a7c75be7716c97cfbc6d3099f3a97ed84aa490be9dee20e787
      lastState: {}
      name: backend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-09-02T01:56:38Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-mfxgh
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.0.21
    podIPs:
    - ip: 10.244.0.21
    qosClass: BestEffort
    startTime: "2025-09-02T01:56:37Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-09-02T01:36:05Z"
    generateName: foodshare-frontend-5d8cc7f8dc-
    labels:
      app: foodshare-frontend
      pod-template-hash: 5d8cc7f8dc
    name: foodshare-frontend-5d8cc7f8dc-8b9h8
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: foodshare-frontend-5d8cc7f8dc
      uid: 6c3c9d0a-6cef-4232-9cc0-fbee8d782468
    resourceVersion: "10070"
    uid: b5f4586e-2d8d-4d1c-8c22-d443d08995a6
  spec:
    containers:
    - image: nginx:alpine
      imagePullPolicy: IfNotPresent
      name: frontend
      ports:
      - containerPort: 80
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: frontend-content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c497g
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: tc-enterprise-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - configMap:
        defaultMode: 420
        name: frontend-content
      name: frontend-content
    - name: kube-api-access-c497g
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:36:13Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:36:06Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:36:13Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:36:13Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:36:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://e307f9f31f4c0089c3db024ed73a48829b2cae8aca29fdfa079e6cbe424d5e12
      image: docker.io/library/nginx:alpine
      imageID: docker.io/library/nginx@sha256:42a516af16b852e33b7682d5ef8acbd5d13fe08fecadc7ed98605ba5e3b26ab8
      lastState: {}
      name: frontend
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-09-02T01:36:12Z"
      volumeMounts:
      - mountPath: /usr/share/nginx/html
        name: frontend-content
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-c497g
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.0.18
    podIPs:
    - ip: 10.244.0.18
    qosClass: BestEffort
    startTime: "2025-09-02T01:36:06Z"
- apiVersion: v1
  kind: Pod
  metadata:
    creationTimestamp: "2025-09-02T01:33:49Z"
    generateName: postgres-699d6cc58b-
    labels:
      app: postgres
      pod-template-hash: 699d6cc58b
    name: postgres-699d6cc58b-d9wsx
    namespace: default
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: postgres-699d6cc58b
      uid: 3252605b-bcf7-45d8-9ee6-936dd3ebf492
    resourceVersion: "9850"
    uid: 681bc616-77c3-4ab1-a13e-5eedabae3563
  spec:
    containers:
    - env:
      - name: POSTGRES_DB
        value: foodshare
      - name: POSTGRES_USER
        value: foodadmin
      - name: POSTGRES_PASSWORD
        value: FoodShare2025!
      image: postgres:13-alpine
      imagePullPolicy: IfNotPresent
      name: postgres
      ports:
      - containerPort: 5432
        protocol: TCP
      resources: {}
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: postgres-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8ldzc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    nodeName: tc-enterprise-control-plane
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: default
    serviceAccountName: default
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: postgres-storage
      persistentVolumeClaim:
        claimName: postgres-pvc
    - name: kube-api-access-8ldzc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:33:56Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:33:55Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:33:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:33:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-09-02T01:33:55Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: containerd://287249cd91972cfd8815acb724cf44113c62c1c8d7224a38861f4006b9063b02
      image: docker.io/library/postgres:13-alpine
      imageID: docker.io/library/postgres@sha256:46c117c7517542c2ac8fad5d146ec6722b940918c1af1e58fad6d9ff4804c01c
      lastState: {}
      name: postgres
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-09-02T01:33:55Z"
      volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: postgres-storage
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-8ldzc
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 172.18.0.2
    hostIPs:
    - ip: 172.18.0.2
    phase: Running
    podIP: 10.244.0.16
    podIPs:
    - ip: 10.244.0.16
    qosClass: BestEffort
    startTime: "2025-09-02T01:33:55Z"
kind: List
metadata:
  resourceVersion: ""
